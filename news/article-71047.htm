<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://chocnode.github.io/news/article-71047.htm" />
    <meta charset="utf-8">
    <title>【SpringMVC笔记02】SpringMVC接收请求参数的几种方式</title>
        <meta name="description" content="这篇文章，主要介绍SpringMVC框架中接收请求参数的几种方式。  目录 一、SpringMVC接收请求参数 1.1、通过方法参数接收 1.2、通过HttpServletRequest接收参数 1." />
        <link rel="icon" href="/assets/website/img/chocnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Choc Node免费机场订阅节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://chocnode.github.io/news/article-71047.htm" />
    <meta property="og:site_name" content="Choc Node免费机场订阅节点官网" />
    <meta property="og:title" content="【SpringMVC笔记02】SpringMVC接收请求参数的几种方式" />
    <meta property="og:image" content="https://chocnode.github.io/uploads/20240925/411f30b9ad38d04675106d07c76fd1c2.webp" />
        <meta property="og:release_date" content="2025-03-10T04:37:13" />
    <meta property="og:updated_time" content="2025-03-10T04:37:13" />
        <meta property="og:description" content="这篇文章，主要介绍SpringMVC框架中接收请求参数的几种方式。  目录 一、SpringMVC接收请求参数 1.1、通过方法参数接收 1.2、通过HttpServletRequest接收参数 1." />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="【SpringMVC笔记02】SpringMVC接收请求参数的几种方式">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Stylesheets -->
    <link href="/assets/website/css/chocnode/bootstrap.css" rel="stylesheet">
    <link href="/assets/website/css/chocnode/style.css" rel="stylesheet">
    <!-- Responsive File -->
    <link href="/assets/website/css/chocnode/responsive.css" rel="stylesheet">
    <!-- Color File -->
    <link href="/assets/website/css/chocnode/color.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Barlow:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    <!-- Responsive -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <!--[if lt IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js"></script><![endif]-->
    <!--[if lt IE 9]><script src="js/respond.js"></script><![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-LNK9XRH7SG"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-LNK9XRH7SG');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="page-wrapper">
                <!-- Preloader -->
        <div class="loader-wrap">
            <div class="preloader">
                <div class="preloader-close">Preloader Close</div>
            </div>
            <div class="layer layer-one"><span class="overlay"></span></div>
            <div class="layer layer-two"><span class="overlay"></span></div>
            <div class="layer layer-three"><span class="overlay"></span></div>
        </div>
        <!-- Main Header -->
        <header class="main-header header-style-one">
            <!-- Header Upper -->
            <div class="header-upper">
                <div class="auto-container">
                    <div class="inner-container">
                        <!--Logo-->
                        <div class="logo-box">
                            <div class="logo">
                                                                <a href="/">
                                    <span>Choc Node</span>
                                </a>
                                                            </div>
                        </div>
                        <div class="right-column">
                            <!--Nav Box-->
                            <div class="nav-outer">
                                <!--Mobile Navigation Toggler-->
                                <div class="mobile-nav-toggler"><img src="/assets/website/img/chocnode/icons/icon-bar.png" alt=""></div>
                                <!-- Main Menu -->
                                <nav class="main-menu navbar-expand-md navbar-light">
                                    <div class="collapse navbar-collapse show clearfix" id="navbarSupportedContent">
                                        <ul class="navigation">
                                                                                        <li><a href="/">首页</a></li>
                                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                                    </ul>
                                    </div>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!--End Header Upper-->
            <!-- Sticky Header  -->
            <div class="sticky-header">
                <div class="header-upper">
                    <div class="auto-container">
                        <div class="inner-container">
                            <div class="right-column">
                                <!--Nav Box-->
                                <div class="nav-outer">
                                    <!--Mobile Navigation Toggler-->
                                    <div class="mobile-nav-toggler"><img src="/assets/website/img/chocnode/icons/icon-bar.png" alt=""></div>
                                    <!-- Main Menu -->
                                    <nav class="main-menu navbar-expand-md navbar-light">
                                    </nav>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div><!-- End Sticky Menu -->
            <!-- Mobile Menu  -->
            <div class="mobile-menu">
                <div class="menu-backdrop"></div>
                <div class="close-btn"><span class="icon flaticon-remove"></span></div>
                <nav class="menu-box">
                    <div class="nav-logo mb-5"></div>
                    <div class="menu-outer">
                        <!--Here Menu Will Come Automatically Via Javascript / Same Menu as in Header-->
                    </div>
                    <!--Social Links-->
                    <div class="social-links">
                        <ul class="clearfix">
                            <li><a href="#"><span class="fab fa-twitter"></span></a></li>
                            <li><a href="#"><span class="fab fa-facebook-square"></span></a></li>
                            <li><a href="#"><span class="fab fa-pinterest-p"></span></a></li>
                            <li><a href="#"><span class="fab fa-instagram"></span></a></li>
                            <li><a href="#"><span class="fab fa-youtube"></span></a></li>
                        </ul>
                    </div>
                </nav>
            </div><!-- End Mobile Menu -->
            <div class="nav-overlay">
                <div class="cursor"></div>
                <div class="cursor-follower"></div>
            </div>
        </header>
        <!-- End Main Header -->
        <!-- Page Title -->
        <section class="page-title" style="background-image: url(/assets/website/img/chocnode/background/bg-8.jpg);">
            <div class="auto-container">
                <div class="content-box">
                    <div class="content-wrapper">
                        <div class="title">
                            <h1>【SpringMVC笔记02】SpringMVC接收请求参数的几种方式</h1>
                        </div>
                        <ul class="bread-crumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/news/">新闻资讯</a></li>
                            <li>正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
        <!-- About Section -->
        <section class="about-section py-5">
            <div class="auto-container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <blockquote> <p><strong>这篇文章，主要介绍SpringMVC框架中接收请求参数的几种方式。</strong></p> </blockquote> <p id="main-toc"><strong>目录</strong></p> <p id="%E4%B8%80%E3%80%81SpringMVC%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-toc" style="margin-left:0px;"><a href="#%E4%B8%80%E3%80%81SpringMVC%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0" rel="nofollow">一、SpringMVC接收请求参数</a></p> <p id="1.1%E3%80%81%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6-toc" style="margin-left:40px;"><a href="#1.1%E3%80%81%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6" rel="nofollow">1.1、通过方法参数接收</a></p> <p id="1.2%E3%80%81%E9%80%9A%E8%BF%87HttpServletRequest%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;"><a href="#1.2%E3%80%81%E9%80%9A%E8%BF%87HttpServletRequest%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0" rel="nofollow">1.2、通过HttpServletRequest接收参数</a></p> <p id="1.3%E3%80%81%40RequestParam%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;"><a href="#1.3%E3%80%81%40RequestParam%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0" rel="nofollow">1.3、@RequestParam注解获取参数</a></p> <p id="1.4%E3%80%81%E9%80%9A%E8%BF%87JavaBean%E5%AF%B9%E8%B1%A1%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;"><a href="#1.4%E3%80%81%E9%80%9A%E8%BF%87JavaBean%E5%AF%B9%E8%B1%A1%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0" rel="nofollow">1.4、通过JavaBean对象接收参数</a></p> <p id="1.5%E3%80%81%E9%80%9A%E8%BF%87%40PathVariable%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0-toc" style="margin-left:40px;"><a href="#1.5%E3%80%81%E9%80%9A%E8%BF%87%40PathVariable%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0" rel="nofollow">1.5、通过@PathVariable注解获取参数</a></p> <hr id="hr-toc"/> </h1> <p>这篇文章主要总结一下SpringMVC框架中，如何接收HTTP请求的参数，主要有如下几种常见的方式。</p> <h2 id="1.1%E3%80%81%E9%80%9A%E8%BF%87%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6">1.1、通过方法参数接收</h2> <p>SpringMVC框架里面，我们可以直接在【Controller】层对应的方法参数里面，编写我们需要接收的参数名称，这样SpringMVC框架就会自动将我们的请求参数和方法参数进行映射绑定。</p> <ul> <li><strong>编写如下测试案例。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {          // 请求参数和方法参数自动映射     @RequestMapping("/param01")     public String param01(String username, String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }      }</code></pre> <ul> <li><strong>启动工程，浏览器访问：【http://localhost:8080/springmvc/param01】，然后查看控制台输出结果。</strong></li> <li><strong>访问时候携带参数：【http://localhost:8080/springmvc/param01?username=root&amp;password=123456】。</strong></li> </ul> <p><img fetchpriority="high" decoding="async" alt="" height="193" src="http://img.555519.xyz/uploads/20230224/82379e43f1833c864a5a8eae5e09f2f4.jpg"></p> <ul> <li> <strong>SpringMVC中，如果接收的参数名称和方法参数名称不同，那么对应的方法参数默认就是null。</strong>&nbsp;</li> </ul> <h2 id="1.2%E3%80%81%E9%80%9A%E8%BF%87HttpServletRequest%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">1.2、通过HttpServletRequest接收参数</h2> <p>在SpringMVC框架中，我们的方法参数里面可以直接使用servlet中的请求对象，要使用servlet的相关api，那么我们需要引入【servlet-api】的依赖，如下所示：</p> <ul> <li><strong>添加【servlet-api】依赖，目的是为了可以在项目中使用servlet相关的类代码。</strong></li> </ul> <pre><code class="language-XML">&lt;!-- 引入servlet-api依赖 --&gt; &lt;dependency&gt;   &lt;groupId&gt;javax.servlet&lt;/groupId&gt;   &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;   &lt;version&gt;2.5&lt;/version&gt;   &lt;!-- 作用域设置为已被提供: 表示servlet-api依赖会被Tomcat容器提供，   打包时候不会再将servlet-api加入到里面 --&gt;   &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt;</code></pre> <ul> <li><strong>通过【HttpServletRequest】获取请求参数。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param02")     public String param02(HttpServletRequest request) {         System.out.println("username=" + request.getParameter("username"));         System.out.println("password=" + request.getParameter("password"));         return "hello";     } }</code></pre> <ul> <li><strong>这种获取参数的方式就是最原始的，直接从HTTP请求里面获取。</strong></li> </ul> <h2 id="1.3%E3%80%81%40RequestParam%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0">1.3、@RequestParam注解获取参数</h2> <p>通过【1.1】的方式获取参数时候，如果我们的前端参数名称和后端方法参数名称不一致，就无法获取到对应的参数值，为了解决前后端参数名称不一致的问题，SpringMVC框架提供了<span style="color:#fe2c24;"><strong>【@RequestParam】</strong></span>注解，解决参数名称不一致的问题。</p> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param03")     public String param03(@RequestParam("uname") String username, @RequestParam("pass") String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }      }</code></pre> <ul> <li><strong>浏览器访问地址：【http://localhost:8080/springmvc/param01?<span style="color:#fe2c24;">uname</span>=root&amp;<span style="color:#fe2c24;">pass</span>=123456】。</strong></li> <li><strong>注意：浏览器的请求参数名称是uname、pass，而后端方法参数名称是：username、password。</strong></li> </ul> <p><img decoding="async" alt="" class="left" height="316" src="http://img.555519.xyz/uploads/20230224/95f05d8ff548cd84da63d04747e2676f.jpg"></p> <h2 id="1.4%E3%80%81%E9%80%9A%E8%BF%87JavaBean%E5%AF%B9%E8%B1%A1%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0">1.4、通过JavaBean对象接收参数</h2> <p>存在这样一种情况，当我们的前端参数数量特别多的时候，如果按照方法参数来接收，那么此时一个方法里面可能就需要写几十个参数名称，显然这样是不合理的，解决这个问题的办法就是通过一个对象来接收前端所有的参数，这个对象就是我们说的一个JavaBean，也就是pojo实体类对象。</p> <ul> <li><strong>创建【User】实体类。</strong></li> </ul> <pre><code class="language-java">public class User {     private String username;     private String password;      public String getUsername() {         return username;     }     public void setUsername(String username) {         this.username = username;     }     public String getPassword() {         return password;     }     public void setPassword(String password) {         this.password = password;     } }</code></pre> <ul> <li><strong>通过【Bean】对象接收参数。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param04")     public String param04(User user) {         System.out.println("username=" + user.getUsername());         System.out.println("password=" + user.getPassword());         return "hello";     }  }</code></pre> <ul> <li><strong>浏览器访问：【http://localhost:8080/springmvc/param04?username=root&amp;password=123456】。</strong></li> <li><strong>可以发现，后端依然可以获取到对应的参数值。</strong></li> </ul> <p><img decoding="async" alt="" class="left" height="283" src="http://img.555519.xyz/uploads/20230224/1a8314e82c17e19b39607e0eaea0a6b3.jpg"></p> <h2 id="1.5%E3%80%81%E9%80%9A%E8%BF%87%40PathVariable%E6%B3%A8%E8%A7%A3%E8%8E%B7%E5%8F%96%E5%8F%82%E6%95%B0">1.5、通过@PathVariable注解获取参数</h2> <p>在Restful风格的HTTP请求里面，有些请求参数会直接放在请求路径里面，并且没有参数名称，对于这种在请求路径中并且没有参数名称的请求参数，SpringMVC框架提供了<span style="color:#fe2c24;"><strong>【@PathVariable】</strong></span>注解进行获取，这种获取参数的方式，叫做：<strong>【路径参数】</strong>。</p> <ul> <li><strong>路径参数，类似于：【/api/param01/<span style="color:#fe2c24;">root</span>/<span style="color:#fe2c24;">123456</span>】。（红色字体表示参数值，其余表示请求路径）。</strong></li> <li><strong>SpringMVC里面，路径参数语法格式如下：</strong></li> </ul> <blockquote> <p><strong>路径参数：【/请求路径/<span style="color:#fe2c24;">{参数名称1}</span>/<span style="color:#fe2c24;">{参数名称2}</span>】</strong></p> <ul> <li><strong>路径参数需要使用【{}】花括号括起来，参数名称任意。</strong></li> </ul> </blockquote> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param05/{username}/{password}")     public String param05(@PathVariable String username, @PathVariable String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }  }</code></pre> <ul> <li><strong>路径参数中的参数名称需要和方法参数名称一致，这样SpringMVC才能够将其进行映射；</strong></li> <li><strong>也可以通过指定【@PathVariable】注解的【value】属性值来关联路径参数。</strong></li> </ul> <pre><code class="language-java">@Controller public class ParamController {      // HttpServletRequest获取参数     @RequestMapping("/param05/{uname}/{pass}") {     public String param05(@PathVariable("uname") String username, @PathVariable("pass") String password) {         System.out.println("username=" + username);         System.out.println("password=" + password);         return "hello";     }  }</code></pre> <ul> <li><strong>上面两种方式都可以，但是实际开发中，还是采用第二种，尽量指定【@PathVariable】注解的【value】属性值，因为这样更容易理解，并且可以确保不出错。</strong></li> </ul> <p><img loading="lazy" decoding="async" alt="" class="left" height="468" src="http://img.555519.xyz/uploads/20230224/68c7aed9b9e3022a169e1c263e7d4c20.jpg"></p> <blockquote> <p><strong>综上，这篇文章结束了，主要介绍SpringMVC框架中接收请求参数的几种常见方式。</strong></p> </blockquote> <p><strong>【源代码地址：<a class="link-info" href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/zhuyoubin/ssm_code/tree/master/spring-mvc/springmvc-demo02"  title="https://gitee.com/zhuyoubin/ssm_code/tree/master/spring-mvc/springmvc-demo02" rel="nofollow">https://gitee.com/zhuyoubin/ssm_code/tree/master/spring-mvc/springmvc-demo02</a>】。</strong></p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-70389.htm">宠物店买猫粮多少钱（宠物店猫粮最便宜多少钱一袋）</a></p>
                                        <p>下一个：<a href="/news/article-71048.htm">设计模式——原型模式</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-47510.htm" title="养猫最忌讳的一个生肖马是什么意思（养猫最忌讳的一个生肖马是什么意思啊）">养猫最忌讳的一个生肖马是什么意思（养猫最忌讳的一个生肖马是什么意思啊）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-27-free-node-subscribe-links.htm" title="1月27日→18.9M/S|2025年最新免费节点SSR/Clash/Shadowrocket/V2ray订阅链接地址">1月27日→18.9M/S|2025年最新免费节点SSR/Clash/Shadowrocket/V2ray订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-13-free-subscribe-node.htm" title="1月13日→18.5M/S|2025年最新免费节点Choc Node订阅链接地址">1月13日→18.5M/S|2025年最新免费节点Choc Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-3-free-high-speed-nodes.htm" title="3月3日→23M/S|2025年最新免费节点SSR/Clash/V2ray/Shadowrocket订阅链接地址">3月3日→23M/S|2025年最新免费节点SSR/Clash/V2ray/Shadowrocket订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-69745.htm" title="动物疫苗和人体疫苗生产有什么区别呢英语 动物疫苗和人体疫苗生产有什么区别呢英语翻译">动物疫苗和人体疫苗生产有什么区别呢英语 动物疫苗和人体疫苗生产有什么区别呢英语翻译</a></li>
                        <li class="py-2"><a href="/news/article-55931.htm" title="动物疫苗研究动态（动物疫苗发展前景）">动物疫苗研究动态（动物疫苗发展前景）</a></li>
                        <li class="py-2"><a href="/news/article-42585.htm" title="被猫咬了怎样判断用不用打狂犬疫苗（被猫咬了怎样判断用不用打狂犬疫苗了）">被猫咬了怎样判断用不用打狂犬疫苗（被猫咬了怎样判断用不用打狂犬疫苗了）</a></li>
                        <li class="py-2"><a href="/news/article-64061.htm" title="C#反射调用dll文件中的方法操作泛型与属性字段_C#教程">C#反射调用dll文件中的方法操作泛型与属性字段_C#教程</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-6-node-share.htm" title="1月6日→20.2M/S|2025年最新免费节点Choc Node订阅链接地址">1月6日→20.2M/S|2025年最新免费节点Choc Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-4-node-share-links.htm" title="3月4日→22.1M/S|2025年最新免费节点Clash/V2ray/SSR/Shadowrocket订阅链接地址">3月4日→22.1M/S|2025年最新免费节点Clash/V2ray/SSR/Shadowrocket订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">36</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
                <footer class="main-footer" style="background-image: url(/assets/website/img/chocnode/background/bg-1.jpg);">
            <!-- Footer Bottom -->
            <div class="footer-bottom">
                <div class="auto-container">
                    <div class="wrapper-box">
                        <div class="copyright">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <div class="text">
                                <a href="/">Choc Node免费机场订阅节点官网</a> 版权所有
                                <br />
                                Powered by WordPress
                            </div>
                        </div>
                        <div class="footer-menu">
                            <ul>
                                <li><a href="#">Sitemap </a></li>
                                <li><a href="#">Terms & Conditions</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!--Scroll to top-->
        <div class="scroll-to-top scroll-to-target" data-target="html"><span class="flaticon-right-arrow-4"></span></div>
        <script src="/assets/website/js/frontend/chocnode/jquery.js"></script>
        <script src="/assets/website/js/frontend/chocnode/popper.min.js"></script>
        <script src="/assets/website/js/frontend/chocnode/bootstrap.min.js"></script>
        <script src="/assets/website/js/frontend/chocnode/bootstrap-select.min.js"></script>
        <script src="/assets/website/js/frontend/chocnode/jquery.fancybox.js"></script>
        <script src="/assets/website/js/frontend/chocnode/isotope.js"></script>
        <script src="/assets/website/js/frontend/chocnode/owl.js"></script>
        <script src="/assets/website/js/frontend/chocnode/appear.js"></script>
        <script src="/assets/website/js/frontend/chocnode/wow.js"></script>
        <script src="/assets/website/js/frontend/chocnode/lazyload.js"></script>
        <script src="/assets/website/js/frontend/chocnode/scrollbar.js"></script>
        <script src="/assets/website/js/frontend/chocnode/TweenMax.min.js"></script>
        <script src="/assets/website/js/frontend/chocnode/swiper.min.js"></script>
        <script src="/assets/website/js/frontend/chocnode/jquery.polyglot.language.switcher.js"></script>
        <script src="/assets/website/js/frontend/chocnode/jquery.ajaxchimp.min.js"></script>
        <script src="/assets/website/js/frontend/chocnode/parallax-scroll.js"></script>
        <script src="/assets/website/js/frontend/chocnode/script.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    </div>
    <!--End pagewrapper-->
</body>

</html>